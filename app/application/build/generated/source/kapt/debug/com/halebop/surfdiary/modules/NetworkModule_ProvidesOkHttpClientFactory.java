// Generated by Dagger (https://dagger.dev).
package com.halebop.surfdiary.modules;

import com.facebook.flipper.plugins.network.FlipperOkhttpInterceptor;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import okhttp3.OkHttpClient;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetworkModule_ProvidesOkHttpClientFactory implements Factory<OkHttpClient> {
  private final NetworkModule module;

  private final Provider<FlipperOkhttpInterceptor> flipperOkhttpInterceptorProvider;

  public NetworkModule_ProvidesOkHttpClientFactory(NetworkModule module,
      Provider<FlipperOkhttpInterceptor> flipperOkhttpInterceptorProvider) {
    this.module = module;
    this.flipperOkhttpInterceptorProvider = flipperOkhttpInterceptorProvider;
  }

  @Override
  public OkHttpClient get() {
    return providesOkHttpClient(module, flipperOkhttpInterceptorProvider.get());
  }

  public static NetworkModule_ProvidesOkHttpClientFactory create(NetworkModule module,
      Provider<FlipperOkhttpInterceptor> flipperOkhttpInterceptorProvider) {
    return new NetworkModule_ProvidesOkHttpClientFactory(module, flipperOkhttpInterceptorProvider);
  }

  public static OkHttpClient providesOkHttpClient(NetworkModule instance,
      FlipperOkhttpInterceptor flipperOkhttpInterceptor) {
    return Preconditions.checkNotNullFromProvides(instance.providesOkHttpClient(flipperOkhttpInterceptor));
  }
}
