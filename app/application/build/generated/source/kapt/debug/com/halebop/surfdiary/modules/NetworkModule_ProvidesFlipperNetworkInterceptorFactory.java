// Generated by Dagger (https://dagger.dev).
package com.halebop.surfdiary.modules;

import com.facebook.flipper.plugins.network.FlipperOkhttpInterceptor;
import com.facebook.flipper.plugins.network.NetworkFlipperPlugin;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetworkModule_ProvidesFlipperNetworkInterceptorFactory implements Factory<FlipperOkhttpInterceptor> {
  private final NetworkModule module;

  private final Provider<NetworkFlipperPlugin> pluginProvider;

  public NetworkModule_ProvidesFlipperNetworkInterceptorFactory(NetworkModule module,
      Provider<NetworkFlipperPlugin> pluginProvider) {
    this.module = module;
    this.pluginProvider = pluginProvider;
  }

  @Override
  public FlipperOkhttpInterceptor get() {
    return providesFlipperNetworkInterceptor(module, pluginProvider.get());
  }

  public static NetworkModule_ProvidesFlipperNetworkInterceptorFactory create(NetworkModule module,
      Provider<NetworkFlipperPlugin> pluginProvider) {
    return new NetworkModule_ProvidesFlipperNetworkInterceptorFactory(module, pluginProvider);
  }

  public static FlipperOkhttpInterceptor providesFlipperNetworkInterceptor(NetworkModule instance,
      NetworkFlipperPlugin plugin) {
    return Preconditions.checkNotNullFromProvides(instance.providesFlipperNetworkInterceptor(plugin));
  }
}
