// Generated by Dagger (https://dagger.dev).
package com.halebop.surfdiary.modules;

import android.app.Application;
import com.squareup.sqldelight.android.AndroidSqliteDriver;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvideSqlDriverFactory implements Factory<AndroidSqliteDriver> {
  private final AppModule module;

  private final Provider<Application> appProvider;

  public AppModule_ProvideSqlDriverFactory(AppModule module, Provider<Application> appProvider) {
    this.module = module;
    this.appProvider = appProvider;
  }

  @Override
  public AndroidSqliteDriver get() {
    return provideSqlDriver(module, appProvider.get());
  }

  public static AppModule_ProvideSqlDriverFactory create(AppModule module,
      Provider<Application> appProvider) {
    return new AppModule_ProvideSqlDriverFactory(module, appProvider);
  }

  public static AndroidSqliteDriver provideSqlDriver(AppModule instance, Application app) {
    return Preconditions.checkNotNullFromProvides(instance.provideSqlDriver(app));
  }
}
