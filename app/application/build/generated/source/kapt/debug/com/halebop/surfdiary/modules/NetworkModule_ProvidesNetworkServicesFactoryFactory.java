// Generated by Dagger (https://dagger.dev).
package com.halebop.surfdiary.modules;

import com.google.gson.Gson;
import com.halebop.network.NetworkServicesFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import okhttp3.OkHttpClient;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetworkModule_ProvidesNetworkServicesFactoryFactory implements Factory<NetworkServicesFactory> {
  private final NetworkModule module;

  private final Provider<OkHttpClient> clientProvider;

  private final Provider<Gson> gsonProvider;

  public NetworkModule_ProvidesNetworkServicesFactoryFactory(NetworkModule module,
      Provider<OkHttpClient> clientProvider, Provider<Gson> gsonProvider) {
    this.module = module;
    this.clientProvider = clientProvider;
    this.gsonProvider = gsonProvider;
  }

  @Override
  public NetworkServicesFactory get() {
    return providesNetworkServicesFactory(module, clientProvider.get(), gsonProvider.get());
  }

  public static NetworkModule_ProvidesNetworkServicesFactoryFactory create(NetworkModule module,
      Provider<OkHttpClient> clientProvider, Provider<Gson> gsonProvider) {
    return new NetworkModule_ProvidesNetworkServicesFactoryFactory(module, clientProvider, gsonProvider);
  }

  public static NetworkServicesFactory providesNetworkServicesFactory(NetworkModule instance,
      OkHttpClient client, Gson gson) {
    return Preconditions.checkNotNullFromProvides(instance.providesNetworkServicesFactory(client, gson));
  }
}
